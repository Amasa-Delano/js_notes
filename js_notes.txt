//array notes

arr.forEach(function(value, index, array)){

}
 //.forEach() always returns undefined but you could do

----------------
arr.map(function(val, index, array){
  return val * 2;
});

//.map returns new array same length as array
------------------------
arr.filter(function(val, index, array){
  return val > 2;
});

-----------
arr.some(function(value, index, array){
  return value < 2;
});

// .some returns true or false

-------------

arr.every(function(value, index, array){
  return value > 5;
});

// .every returns true or false

------------------

arr.reduce(function(acc, next, index, array){

}, optional_second_param);  //acc starts out as first value in array OR optional_second_param if provided

//ex.
var names = ['a', 'b', 'c', 'd'];
names.reduce(function(acc, next){
  return acc += ' ' + next;
}, 'the names are');

//ex.
var arr = [5,4,1,5,4];

arr.reduce(function(acc, next){
    if(next in acc){
      acc[next]++;
    }else{
      acc[next] = 1;
    }
    return acc;
}, {});

//ex.
function sumOdds(arr){
  return arr.reduce(function(acc, next){
    if(next % 2 !== 0){
      acc += next;
    }
    return acc;
  }, 0);
}
// .reduce takes array and transforms it to another data struture
----------------------------
//closures
function outer(){
  var start = 'closures are';
  return function inner(){
    return start + ' ' + 'cool';
  }
}

var cool = outer()(); //'closures are cool'

//inner function has access to start variable even though outer function has returned
//the inner function will only "remember" a variable from the outer function if that variable is used in the inner function
// you can use closure to create a 'private' variable...
function counter(){
  var count = 0;
  return function inner() {
    count++;
    return count;
  }
}

var counter1 = counter();
counter1(); //1
counter1(); //2
var counter2 = counter();
counter2(); // 1...counter1 did not modify count variable

-----------------------------------
//this
1. this determined by how a function is called (execution context); it gets set when a function is called;
  -> every time function run the function gets argument and this keyword.
2. four rules to determine this
    1. 'this' will refer to the global object if it is just you know out there OR if
        it is inside a function that is NOT inside an declared object. eg:
        function cool(){
          return this; //this refers to window
        }
        BUT if you "use strict" you get undefined (so you can't assign variable to global this)

    2. 'this' is inside a declared object then 'this' takes on context of the nearest object eg
        var person = {
            firstname = 'Cool';
            sayHi = function(){
              return 'Way ' + this.firstname;
            }
        }
        person.sayHi(); // "Way Cool";
    3. explicit binding. call, apply, bind. to set 'this' in a function
       call(thisArg, a, b, c,....)  is immediatley invoked
       apply(thisArg, [a,b,c,...]) is invoked immediatley
       bind(thisArg, a, b, c,.....) NOT invoked immediatley...returns a function definition

       ex: write a function which accepts a function and max amount that function can be invoked...

       function invokeMax(fun, num){
         var max = 0;
         return  function(){
          if(max >= num){
            return 'Maxed out, dude!';
          }
          max++;
          return fn.apply(this, arguments); //this doesn't matter here it's a placeholder
         }
       }

       thus if we have fun = function add(a,b) { return a + b} and we do
       var cool = invokeMax(add, 3);
       cool(2,3) //5
       cool(5,7) //12
       cool(13, 15) // 28
       cool(0,1) // 'Maxed out, dude!'
   4. The 'new' keyword....
          .... then 'this' will refer to the object created
          function Person(firstName, lastName){
            this.firstName = firstName;
            this.lastName = lastName;
          }
          var elie = new Person("Elie", "Schoppik");
          elie.firstName; // "Elie"
          elie.lastName; // "Schoppik"


       new:
         - creates empty object
         - sets 'this' to be that empty object
         - adds 'return this' to function
         - add property __proto__ to the empty object which links the empty object to then
            prototype property on the constructor function that created the empty object

      suppose we have:
        function Car(make, model, year){
          this.make = make;
          this.model = model;
          this.year = year;
          this.numwheels = 4;
        }
        And we want to resuse some of that code we do:
        function Motorcycle(make, model, year){
          Car.call(this, make, model, year);  //use call to set the 'this' to be Motorcycle object
          this.numwheels = 2;
        }
        ...same as...
        function Motorcycle(make, model, year){
           Car.apply(this, [make, model, year]);
           this.numwheels = 2;
        }
        ...same as...
        function Motorcycle(){ //dont need args
          Car.apply(this, arguments);
          this.numwheels = 2;
        }
        note: arguments is not actually an array but is similar

    PROTOTYPES
      1. every constructor function has a property on it called "prototype".
          "prototype" is an object.
      2. the "prototype" object has a property on it called "constructor"
          "constructor" points back to the constructor function
      3. objects created via new + constructor() have a property called "__proto__"
          "__proto__" links the newly created object to the prototype object on
          the constructor function. ie obj.__proto__ === Obj.prototype is true
          but note we say 'link' instead of 'copy' because then any time you add
          to Obj.prototype all objects created from Obj get the addition

    PROTOTYPE CHAIN
     you say obj.x where 'x' is a property or method. Js first checks to see if that
     method is on obj; if not, then it goes to obj __proto__ which is just looking at the properties / methods
     on the prototype property of the constructor function. if the property / method not found on
     the prototype then js will look at the __proto__ of the prototype...if that prototype
     was created from a separate constructor...and so on...if never found then returns undefined.

     eg:
     function Person(name){
      this.name = name;
     }

     Person.prototype.sayHi = function(){
      return "Hi " + this.name;
     }

     note: to check if object created by a constructor do: person instanceof person


     suppose we have:
     function Person(first, last){
     	this.first = first;
     	this.last = last;
     }

     and then we do:
     function Student(first, last){
     	Person.apply(this, arguments);
     }

     now suppose we also do: Person.prototype.sayHi = function(){
     	return 'Boo!!!';
     }
     and also: Student.prototype.sayHI = function(){
     	return 'Boo!!!';
     }
     But that is redundant; how can we give Student() the Person() sayHi method?
     	--> Student.prototype = Object.create(Person.prototype); // = prototypal inheritance
     	Then if we do Student.prototype.status = function(){
     		return 'Cool';
     	}
     	Student objects have status but Person objects don't (what we want)
     	final step: Student.prototype.constructor = Student; //need to reset this property that was overwritten by Object.create...

    -------------------
    	ES2015
    	
	A. CONST: variables cannot be redefined; but if is an array or object, can add to it.
	B. LET: has block scoping. 
		hoisting --> a variable's declaration is moved to top of block. (and gets undefined for value). 
		function cool(){                                      function cool(){
		     return boo;             is equivalent to 		    var boo;
		     var boo = 'boo';					    return boo;
		}							    boo = 'boo';
									}
		Let variables get hoisted but they go into Temporal Dead Zone (?) and you can't access them so would get a reference error in
		function cool(){
			return boo;
			let boo = 'boo'
		}
	C. Arrow functions
		if you put function on one line don't need return keyword or {}, eg var add = (a,b) => a+b;
			if you have only single parameter doesn't need (), eg var addThree = a => a + 3;
		Arrow functions don't get own 'this'; 'this' is whatever value of 'this' is just outside of the function
		Arrow functions don't get own 'arguments' keyword either 
		Never use Arrow functions as methods in objects you will get wrong value of 'this'
	D. Default Params, function add(a=10, b=20){
				return a+b;
			   }
	E. For...of  iterate over arrays, strings, maps, sets (but not objects)
		for(let val of arr){
		   console.log(val);
		}
	F. Rest operator
		function printMe(a,b,...c){
			console.log(a);
			console.log(b);
			console.log(c);
		}
		printMe(1,2,3,4,5);
		//1
		//2
		//[3,4,5]  extra params gathered up in an array
	G. Spread operator
		used on arrays to 'spread' each value out as a comma separated value
		useful when you have array but you need comma separated values
		suppose:
			var arr1 = [1,2,3]
			var arr2 = [4,5,6]
			var arr3 = [7,8,9]
			var all = arr1.concat(arr2).concat(arr3);  //ES5
			var all = [...arr1, ...arr2, ...arr3]; //ES2015
		spread can replace apply sometimes
		eg Math.max() takes comma separated list. so you can't do Math.max(arr);
		in ES5 Math.max.apply(this, arr);
		in ES2015 Math.max(...arr);
	H. Object enhancements
		object shorthand notation. 
			var first = 'boo';
			var last = 'bug';
			var obj = { 
			   first,  //property and variables names same
			   last
			}
		object methods.
		    var obj = {
			sayHi(){  //not arrow functions and not function keyword
			  console.log('boo');
			}	
		    }
		computed property names.
			var first = 'boo';
			var obj = {
			    [first]: 'hi!!!'
			}
			then: obj.boo = 'hi!!!';
			as opposed to var obj = {}
				      obj[first] = 'hi!!!'
	I. Destructuring = extracting values from data stored in objects / arrays
		1. Objects
			var instructor = {
				first: "boo",
				last: "bug',
			}
			var {first, last} = instructor;
			first; //"boo"
			last; //"bug"
			can rename to: var {first:aa, last:bb} = instructor;
			aa; //"boo"
			bb; //"bug"
			function cool({name = {first:"boo", last:"bug"}, iscool = true} = {}){
				return [name.first, name.last, iscool];
			}
			function cool({name,color}){
			   return [name, color];
			}
		2. Arrays
			var arr = [1,2,3]
			var [a,b,c] = arr;
			a; //1
			b; //2
			c; //3
			swapping values:
				function swap(a,b){
					return [a,b] = [b,a];
				}

-------------------
class
in ES5 object orientated we would have:

function Student(first, last){
  this.first = first;
  this.last = last;
}

var cool = new Student('way', 'cool');

in ES2015 we would have:
class Student {
  constructor(first, last){
    this.first = first;
    this.last = last;
  }
}

var cool = new Student('way', 'cool');

ES2015 way to add method to all instances created from the class:

class Student {
  constructor(first, last){
    this.first = first;
    this.last = last;
  }
  sayHello(){
    retun "BOO!!!!"
  }
}

class methods --> directly on constructor function; 
in ES5 Student.iStudent = function(obj) {
  return obj.constructor === Student;
}
in ES2015:
class Student {
  constructor(first, last){
    this.first = first;
    this.last = last;
  }
  sayHello(){
    retun "BOO!!!!"
  }
  static isStudent(obj){
    return obj.constructor === Student;
  }
}

then create a new Student object s and do Student.isStudent(s);
-------
inheritance:

ES5:
function Person(first, last){
  this.first = first;
  this.last = last;
}

Person.prototype.sayHello(){
  return "BOO!!!!";
}

function Student(first, last){
  this.first = first;
  this.last = last;
}

Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;

in ES2015:

class Person{
  constructor(first, last){
    this.first = first;
    this.last = last;
  }
  sayHello(){
    return "BOO!!!!":
  }
}

class Student extends Person {
  
}

Avoid duplication in ES2015 using Super
in ES5 we avoid duplication by:

function Person(first, last){
  this.first = first;
  this.last = last;
}

Person.prototype.sayHello(){
  return "BOO!!!!"
}

function Student(){
  Person.apply(this, arguments);
}

in ES2015:
class Person{
  constructor(first, last){
    this.first = first;
    this.last = last;
  }
  sayHello(){
    return "BOO!!!!":
  }
}

class Student extends Person {
  constructor(first, last){
    super(first, last);
  }
}

------------
MAPS
var cool = new Map;
cool.set(1, 'boo');
cool.set(true, 'bug');
cool.delete(1);
cool.size //1
cool.get(true)

WeakMap ....all keys must be objects. cannot iterate over.

Set

WeakSet....all keys must be objects. cannot iterate over.

-------
Promises
recall they are:
- a one time guaranteed return of some future value
- when that value is figured out the promise is resolved or rejected
- use to refactor callback code
- the returned value from a Promise always has a .then and a .catch method which 
  are functions to be executed when proimse is resolved or rejected
- if a .then method returns another Promise then you can chain the .then methods
- Promise.all --> accepts an array of promises; if they all resolve, cool; but if one
  is rejected the whole thing is rejected == 'fail fast'. If they resolve, you get
  back an array of resolved promises in the right order

  example: 
  function getMovie(title){
    return $.getJSON(`https://omdbapi.com?t=${title}&apikey=thewdb`);
  }
  var a = getMovie('a');
  var b = getMovie('b');
  var c = getMovie('c');

  Promise.all([a,b,c]).then(function(movies){
    return movies.forEach(function(value){
      console.log(value.Year);
    });
  });

-------
Generators
-- special kind of function you can pause execution and resume later
-- create using a * 
-- when invoked generator object is returned to us with keys of value and done

function* pauseAndReturnvalues(num){
  for(let i = 0; i < num; i++){
    yield i;
  }
}

var gen = pauseAndReturnValues(5);
gen.next(); {value: 0, done: false}
gen.next(); {value: 1, done: false}
gen.next(); {value: 2, done: false}
gen.next(); {value: 3, done: false}
gen.next(); {value: 4, done: false}
gen.next(); {value: undefined, done: true}

you can iterate over generators

async example:

function* cool(name){
  yield $.getJson(`https://omdbapi.com?t=${name}&apikey=thewdb`);
}

var dope = cool('cool');
dope.next().value.then( val => console.log(val));
----------
var o = {name: "Cool"}
var o2 = Object.assign({}, o);
o2.name = "Dope"
o.name //"Cool" -- didn't change

----
var z = [{cool: 'way'}, {cool: 'yeah'}, {cool: 'dope'}];

z.find(function(val){
  return val.name === 'dope';
}); // {cool: 'dope'}

------
es2016: [].includes

---
es2017 methods:
str.padStart, str.padEnd

async functions
async function first(){
  return "COOL!!!!";
}

first(); //returns a promise
first().then(val => console.log(val)); //"COOL!!!!"

use the await keyword before a promise in an async function. this causes function to pause]
until promise is resolved. allows for streamlining code to avoid call backs/the/yield. makes the code run synchronously

ex.

async function getData(){
  var data = await $.getJSON('......');
  console.log(data); //this line will not run until promise above is resolved
}

if the promise does not resolve an exception will be thrown so wrap in try block:

async function getCool(cool){
  try{
    var response = await $.getJSON('.....');
    console.log(response.name);
  } catch(e){
    console.log('not cool!!!');
  }
}

if you are making multiple http requests with async here's how to send the requests in parallel and then await:

async function getData(){
  var a = $.getJSON('....');
  var b = $.getJSON('....');

  var aData = await a;
  var bData = await b;
}

async function getAllData(a,b){
  var all = await Promise.all([
    $.getJSON('....a');
    $.getJSON('....b');
  ]);
  console.log(all[0].cool);
  console.log(all[1].cool);
}

-----
object spread syntax: copy enumerable properties from one object to another
const cat = {age: 4, name: cool}
const kitten = {...cat, age:1}